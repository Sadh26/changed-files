name: CI

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: self-hosted
    name: Test changed-files
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2  # OR "2" -> To retrieve the preceding commit.


      - name: Get changed files in the src folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v37
        with:
          files: src/**/*.lvproj  # Alternatively using: `docs/**` or `docs`
          separator: ","
       
          # test_files: src/**/Tests/*.vi
          # files_ignore: docs/static.js
        # run: |
        #   echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"
          
          

      - name: Run step if any file(s) in the src folder change
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"
          $workspace = "${{ github.workspace }}"
          $workspace_path = $workspace.Replace("\", "/")
          $changed_file = "${{ steps.changed-files-specific.outputs.all_changed_files }}"
          $directory = "$workspace_path/$changed_file"
          echo "Directory: $directory"
          LabVIEWCLI -OperationName RunVI -VIPath "${{ github.workspace }}\src\Project file\OpenProject.vi" "$directory"
          $TestPath = "$(Split-Path $directory -Parent)\Tests"
          echo "Test Path: $TestPath"

          $isFileExist = $false

          # Function to find test vi files
          function Find-ViFiles {
              param (
                  [string]$TestPath
              )

          Get-ChildItem $path -Recurse | ForEach-Object {
              if ($_.PSIsContainer) {
                  Find-ViFiles $_.FullName
              }

              elseif ($_.Extension -eq ".vi") {
                  $isFileExist = $true
                  Write-Output ("`n`nFound .vi file: " + $_.FullName)
                  Write-Output ("Running unit test file " + $_.FullName)
                  $output = g-cli --lv-ver 2020 $_.FullName
                  Write-Output ("$output")
                  if ($output -ne $null) {
                    $errorIn = "true"
                  }
              }
          }
          if ($isFileExist -eq $false) {
            Write-Output "No test files found"
          }
          if ($errorIn -eq "true") {
            return $true
          }
          else {
            return $false
          }
          }
          Find-ViFiles $TestPath
