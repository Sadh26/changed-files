
name: CI

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: self-hosted
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37
        
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      - name: List all changed files
        run: |
          foreach ($file in "${{ steps.changed-files.outputs.all_changed_files }}") {
            Write-Output "$file was changed"
          }

      # Example 3
      - name: Get changed files in the src folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v37
        with:
          files: src/**/*.vi  # Alternatively using: `docs/**` or `docs`
          separator: ","
          # test_files: src/**/Tests/*.vi
          # files_ignore: docs/static.js

      - name: Run step if any file(s) in the src folder change
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"
          
          if ($__.Extension -eq ".vi"){
            Write-Output ("`n`nFound .vi file: " + $_.FullName)
          }

          function Find-ViFiles {
              param (
                  [string]$path
              )

              Get-ChildItem $path -Recurse | ForEach-Object {
                  if ($_.PSIsContainer) {
                      Find-ViFiles $_.FullName
                  }
                  elseif ($_.Extension -eq ".vi") {
                      $isFileExist = $true
                      Write-Output ("`n`nFound .vi file: " + $_.FullName)
                      Write-Output ("Running unit test file " + $_.FullName)
                  
                      }
                  }
              }

          # The starting directory for iteration
          $starting_directory = "Tests"


          $isFileExist = $false
          Find-ViFiles $starting_directory


          if ($isFileExist -eq $false) {
              Write-Output "No test files found"
          }

          Write-Output $isFileExist